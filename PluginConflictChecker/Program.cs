using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Skyrim;
using System.Text.Json;
using System.Text.Json.Nodes;

namespace PluginConflictChecker
{
    internal class Program
    {
        public static Settings Settings = new Settings(false);

        static List<string> LoadOrder = new();
        static HashSet<string> IgnoredPlugins = new();
        static HashSet<string> ErroredPlugins = new();

        //                FormKey, Plugin List
        static Dictionary<string, HashSet<string>> ConflictsByformKeyList = new();

        //               Plugin Name, Conflicting Mod Name, Conflict Numbers
        static Dictionary<string    , Dictionary<string   , int>> ConflictsByModNames = new();

        static bool StartUp()
        {
            Settings = Settings.Load();
            if (!File.Exists(Settings.PluginTXTPath))
            {
                GF.WriteLine("Could not find the file at PluginTXTPath.");
                GF.WriteLine("The path should be pointing towards your plugins.txt located at My Games\\Skyrim Special Edition\\plugins.txt,");
                GF.WriteLine("Or a plugins.txt inside your MO2 profile folder.");
                Settings.Valid = false;
            }

            List<string> list = new List<string>();

            if (File.Exists("Properties\\IgnoredPlugins.txt")) list.AddRange(File.ReadAllLines("Properties\\IgnoredPlugins.txt"));

            if (File.Exists("Properties\\CustomIgnoredPlugins.txt")) list.AddRange(File.ReadAllLines("Properties\\CustomIgnoredPlugins.txt"));

            IgnoredPlugins = list.ToHashSet();

            if (File.Exists("DevWrite.txt"))
            {
                File.Delete("DevWrite.txt");
                GF.DevWriteBool = true;
                File.Create("DevWrite.txt").Close();
            }

            if (Directory.Exists("Reports"))
            {
                Directory.Delete("Reports", true);
            }

            return Settings.Valid;
        }

        static void Main(string[] args)
        {
            try
            {
                if (!StartUp())
                {
                    GF.EndProgram();
                    return;
                }
            
                foreach (string line in File.ReadAllLines(Settings.PluginTXTPath))
                {
                    if (line.Contains("# This file was automatically generated by Mod Organizer.", StringComparison.OrdinalIgnoreCase)) continue;
                    if (!line[0].Equals('*')) continue;

                    string pluginName = line[1..].ToLower();

                    LoadOrder.Add(pluginName);

                    if (IgnoredPlugins.Contains(pluginName, StringComparer.OrdinalIgnoreCase)) continue;
                    GF.WriteLine(pluginName);

                    try
                    {
                        if (Settings.Fallout4) LoadPluginDataFallout(pluginName);
                        else LoadPluginDataSkyrim(pluginName);
                    }
                    catch(Exception e)
                    {
                        GF.WriteLine(e.Message);
                        GF.WriteLine(e.StackTrace!);
                        ErroredPlugins.Add(pluginName);
                    }
                }

                GF.DevWrite("Sorting For Mod Name-------------------------------------------------------");
                SortForModName();

                Directory.CreateDirectory("Reports");
                GF.DevWrite("Outputting FormKey List-------------------------------------------------------");
                OutputConflictsByformKeyList();
                GF.DevWrite("Outputting Plugin List-------------------------------------------------------");
                OutputConflictsByPlugin();

                if (Settings.OutputJson)
                {
                    var jsonoptions = new JsonSerializerOptions()
                    {
                        WriteIndented = true
                    };
                    File.WriteAllText("Reports\\FormKeyList.json", JsonSerializer.Serialize(ConflictsByformKeyList, jsonoptions));
                    File.WriteAllText("Reports\\PluginList.json", JsonSerializer.Serialize(ConflictsByModNames, jsonoptions));
                }

                if(ErroredPlugins.Count > 0)
                {
                    GF.WriteLine("These plugins could not be fully run:");
                    foreach(string pluginName in ErroredPlugins)
                    {
                        GF.WriteLine("\t" + pluginName);
                    }
                }
            }
            catch (Exception e)
            {
                GF.WriteLine(e.Message);
                GF.WriteLine(e.StackTrace!);
            }
            GF.EndProgram();

            Explorer();
        }

        static void LoadPluginDataSkyrim(string pluginName)
        {
            GF.DevWrite("Skyrim");
            string path = Path.Combine(Settings.DataFolder, pluginName);
            if(!File.Exists(path))
            {
                GF.DevWrite(pluginName + " Not Found");
                return;
            }

            using var mod = SkyrimMod.CreateFromBinaryOverlay(path, SkyrimRelease.SkyrimSE);

            HashSet<string> masters = new();
            if (Settings.FilterOutMasterOverrides)
            {
                GF.DevWrite("Loading Masters header");
                foreach (var master in mod.ModHeader.MasterReferences.ToHashSet()) masters.Add(master.Master.ToString().ToLower());
            }

            foreach (var rec in mod.EnumerateMajorRecords())
            {
                GF.DevWrite(rec.FormKey.ToString());
                if (Settings.FilterSettings.TypeFilter.Contains(rec.Type.Name))
                {
                    GF.DevWrite("Filtered Out");
                    continue;
                }

                string recKey = rec.FormKey.ToString().ToLower();
                if (!ConflictsByformKeyList.ContainsKey(recKey))
                {
                    ConflictsByformKeyList.Add(recKey, new HashSet<string>());
                    GF.DevWrite("Adding Key: " + recKey);
                }

                if (!Settings.FilterOutMasterOverrides)
                {
                    ConflictsByformKeyList[recKey].Add(pluginName);
                    GF.DevWrite("Master Overrides: " + recKey + pluginName);
                }
                else if (DoesNotContainsMasterModKey(recKey, masters))
                {
                    ConflictsByformKeyList[recKey].Add(pluginName);
                    GF.DevWrite("No Master Overrides: " + recKey + pluginName);
                }
            }
        }

        static void LoadPluginDataFallout(string pluginName)
        {
            GF.DevWrite("Fallout 4");
            string path = Path.Combine(Settings.DataFolder, pluginName);
            if (!File.Exists(path))
            {
                GF.DevWrite(pluginName + " Not Found");
                return;
            }

            using var mod = Fallout4Mod.CreateFromBinaryOverlay(path);

            HashSet<string> masters = new();
            if (Settings.FilterOutMasterOverrides)
            {
                GF.DevWrite("Loading Masters header");
                foreach (var master in mod.ModHeader.MasterReferences.ToHashSet()) masters.Add(master.Master.ToString().ToLower());
            }

            foreach (var rec in mod.EnumerateMajorRecords())
            {
                if (Settings.FilterSettings.TypeFilter.Contains(rec.Type.Name))
                {
                    GF.DevWrite("Filtered Out");
                    continue;
                }

                string recKey = rec.FormKey.ToString().ToLower();
                if (!ConflictsByformKeyList.ContainsKey(recKey))
                {
                    ConflictsByformKeyList.Add(recKey, new HashSet<string>());
                    GF.DevWrite("Adding Key: " + recKey);
                }

                if (!Settings.FilterOutMasterOverrides)
                {
                    ConflictsByformKeyList[recKey].Add(pluginName);
                    GF.DevWrite("Master Overrides: " + recKey + pluginName);
                }
                else if (DoesNotContainsMasterModKey(recKey, masters))
                {
                    ConflictsByformKeyList[recKey].Add(pluginName);
                    GF.DevWrite("No Master Overrides: " + recKey + pluginName);
                }
            }
        }

        static bool DoesNotContainsMasterModKey(string formKey, HashSet<string> masters)
        {
            if (ConflictsByformKeyList[formKey].Count > masters.Count)
            {
                foreach (string master in masters)
                {
                    if (ConflictsByformKeyList[formKey].Contains(master)) return false;
                }
            }
            else
            {
                foreach (string master in ConflictsByformKeyList[formKey])
                {
                    if (masters.Contains(master)) return false;
                }
            }
            return true;
        }

        static void SortForModName()
        {
            foreach (var formkeypair in ConflictsByformKeyList)
            {
                foreach (string pluginName1 in formkeypair.Value)
                {
                    GF.DevWrite(pluginName1);
                    if (!ConflictsByModNames.ContainsKey(pluginName1))
                    {
                        GF.DevWrite("Adding Key");
                        ConflictsByModNames.Add(pluginName1, new Dictionary<string, int>());
                    }

                    foreach (var pluginName2 in formkeypair.Value)
                    {
                        GF.DevWrite(pluginName2);
                        if (pluginName1.Equals(pluginName2, StringComparison.OrdinalIgnoreCase))
                        {
                            GF.DevWrite("Ignoring Plugin Match");
                            continue;
                        }
                        if (!ConflictsByModNames[pluginName1].ContainsKey(pluginName2))
                        {
                            GF.DevWrite("Adding Key"); 
                            ConflictsByModNames[pluginName1].Add(pluginName2, 1);
                        }
                        else
                        {
                            GF.DevWrite("Iterating Conflict");
                            ConflictsByModNames[pluginName1][pluginName2]++;
                        }
                    }

                }
            }
        }

        static void OutputConflictsByformKeyList()
        {
            using StreamWriter sw = new("Reports\\FormKeyList.txt", false);
            foreach (var formkeypair in ConflictsByformKeyList)
            {
                GF.DevWrite(formkeypair.Key);
                if (formkeypair.Value.Count > 1)
                {
                    GF.DevWrite("Writing " + formkeypair.Key);
                    sw.WriteLine(formkeypair.Key);
                    foreach (var kvp in formkeypair.Value)
                    {
                        GF.DevWrite("Writing " + kvp);
                        sw.WriteLine("\t" + kvp);
                    }
                }


            }
        }

        static void OutputConflictsByPlugin()
        {
            using StreamWriter single = new("Reports\\PluginList.txt", false);

            if (Settings.OutputToSeperateFiles) Directory.CreateDirectory("Reports\\SeperatedPluginLists");

            foreach (KeyValuePair<string, Dictionary<string, int>> formKeyPair in ConflictsByModNames)
            {
                GF.DevWrite(formKeyPair.Key);
                ConflictsByModName plugin = new(formKeyPair);
                if (plugin.Conflicts.Count > 0)
                {
                    GF.DevWrite("Writing " + plugin.PluginName);
                    single.WriteLine(plugin.PluginName);
                    foreach (var conflict in plugin.Conflicts)
                    {
                        GF.DevWrite("Writing " + "\t" + conflict.PluginName + " : " + conflict.number + " Conflicts.");
                        single.WriteLine("\t" + conflict.PluginName + " : " + conflict.number + " Conflicts.");
                    }

                    if (!Settings.OutputToSeperateFiles) continue;

                    using (StreamWriter Multiple = new($"Reports\\SeperatedPluginLists\\{plugin.PluginName}.txt", false))
                    {
                        GF.DevWrite("Writing Multi File " + formKeyPair.Key);
                        Multiple.WriteLine(plugin.PluginName);
                        foreach (var conflict in plugin.Conflicts)
                        {
                            GF.DevWrite("Writing Multi File " + "\t" + conflict.PluginName + " : " + conflict.number + " Conflicts.");
                            Multiple.WriteLine("\t" + conflict.PluginName + " : " + conflict.number + " Conflicts.");
                        }
                    }

                }
            }
        }

        static void Explorer()
        {
            if (Settings.Explorer)
            {
                System.Diagnostics.Process.Start("explorer.exe", "\"" + Path.GetFullPath("Reports") + "\"");
            }
        }
    }
}